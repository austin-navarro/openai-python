{
  "asset_name": "Polygon",
  "research_content": "### Source 1: Polygon 2.0: Protocol Architecture - https://polygon.technology/blog/polygon-2-0-protocol-vision-and-architecture\n\nToday, Polygon Labs\u2019 engineering teams are sharing a proposed architecture for Polygon 2.0, designed to provide unlimited scalability and unified liquidity, and realize the vision of Polygon as the Value Layer of the Internet.\n\nPolygon 2.0 is the solution. Just like the Internet is an elastically scalable, unified environment for accessing information, Polygon 2.0 is an elastically scalable, unified environment for accessing value: the Value Layer of the Internet.\n\nThe Execution Layer enables any Polygon chain to produce sequenced batches of transactions, aka blocks. This protocol layer is relatively commoditized; it is used in a similar format by most blockchain networks (Ethereum, Bitcoin, etc.).\n\nThe Execution Layer has multiple components, such as:\n\n- P2P: Enables nodes (validators and full nodes) to discover each other and exchange messages;\n- Consensus: Enables validators to reach agreement on a single worldview, i.e. chain of blocks;\n- Mempool: Collects transactions submitted by users and syncs them between validators;\n- Database: Stores transaction history;\n- Witness generator: Generates witness data required by ZK prover.\n\nThe Proving Layer is a highly-performant, flexible ZK proving protocol. It generates proofs for all transactions \u2013 internal and external (i.e. cross-chain) \u2013 for every Polygon chain.\n\nThe Proving Layer has the following components:\n\n- Common prover: Highly performant ZK prover, developed by Polygon\u2019s ZK researchers as the successor of Plonky2, a recursive SNARK which itself pushed the boundaries of proving efficiency by two orders of magnitude and demonstrated the expertise of Polygon\u2019s ZK team. The prover offers a clean interface, designed to support arbitrary transaction types, i.e. state machine formats. Additionally, using a single prover makes proof aggregation and verification straightforward and very efficient.\n- (Optional) State machine constructor: A framework for defining state machines, developed by Polygon\u2019s ZK researchers as the successor of PIL, the framework used to build the initial Polygon zkEVM implementation. Constructor abstracts the complexity of the proving mechanisms and allows developers to construct state machines through an easy-to-use interface. It is modular; allows developers to define parameterizable state machines, making it easier to build, test and audit even large and complex state machines.\n- State machine: The simulation of the execution environment and transaction format that is being proven by the prover. State machines can be implemented using the aforementioned constructor or completely custom, e.g. using Rust. Polygon\u2019s ZK teams offer two state machine implementations \u2013 zkEVM and MidenVM \u2013 and additional ones (e.g. zkWASM) can be built by the community.\n\nThe novel design of the Proving Layer offers several major benefits, namely:\n\n- Efficient proof generation and verification;\n- Straightforward and efficient proof aggregation;\n- Implementation of different ZK state machines;\n- Safe cross-chain communication between those state machines.\n\n### Source 2: Things you should know about Polygon. Overview | by Citadel.One | Citadel.One | Medium - https://medium.com/citadel-one/things-you-should-know-about-polygon-overview-40ba2c06db3c\n\nThe Polygon PoS Network has a three-layer architecture:\n\n- Ethereum layer \u2014 a set of contracts on the Ethereum mainnet.\n- Heimdall layer \u2014 a set of proof-of-stake Heimdall nodes running parallel to the Ethereum mainnet, monitoring the set of staking contracts deployed on the Ethereum mainnet and committing the Polygon Network checkpoints to the Ethereum mainnet. Heimdall is based on Tendermint.\n- Bor layer \u2014 a set of block-producing Bor nodes shuffled by Heimdall nodes. Bor is based on Go Ethereum.\n\nMATIC is Polygon\u2019s native ERC-20 token. MATIC used to:\n\n- pay transaction fees\n- govern and secure the network by staking\n\nIn addition, MATIC is the currency of Polygon apps that enables users to interact with hundreds of dApps involved in the ecosystem.\n\nMore than 19,000 decentralized applications running on the network. Polygon PoS is home to some of the biggest Web3 projects from DeFI protocols like Aave and Uniswap V3 to NFT marketplaces like OpenSea.\n\nThe Web3 applications built on Polygon offer low fees, high scalability and high security.\n\n### Source 3: Polygon (blockchain) - https://en.wikipedia.org/wiki/Polygon_%28blockchain%29\n\nBy February 2023, the blockchain was doing business with large companies such as Starbucks and Mastercard, with Fortune noting it had been relatively unaffected by the 2022 cryptocurrency crash compared to other companies. The Fox Network began working with Polygon on a blockchain project in 2023.\n\nIn January 2024, Polygon announced that its community had voted to fund a new \"Community Treasury\", with about $640 million worth of tokens to fund grants for projects within the Polygon ecosystem.\n\nIn February 2024 Polygon Labs laid off 60 employees, or around 19% of its staff.\n\nPolygon employs a modified proof-of-stake consensus technique, which allows consensus to be reached with every block on the blockchain. (Using standard proof-of-stake, achieving consensus will need processing a large number of blocks to establish consensus.) The proof of stake method requires network participants to stake\u2014agree to not trade or sell\u2014their POL tokens, in exchange for the right to validate Polygon network transactions. Successful validators in the Polygon network are rewarded with POL tokens proportionally to their POL stake. The Polygon network aims to address problems within the Ethereum platform, namely high transaction fees and slow processing speeds.\n\nIn January 2024, Polygon announced a new protocol called AggLayer that aims to aggregate zero-knowledge proofs (ZK-proofs) from multiple blockchains and allow developers to connect layer 1 and 2 block ",
  "citations": [],
  "source_count": 3,
  "success": true,
  "timestamp": "2025-04-10T16:05:26.982872",
  "duration_seconds": 22.253329038619995
}