---
description: 
globs: 
alwaysApply: true
---
Here‚Äôs a detailed breakdown of how this Comparison Blog Post Generation Agent script works, step-by-step:

‚∏ª

üîß Setup and Initialization
	‚Ä¢	Environment & API:
	‚Ä¢	Loads environment variables using dotenv to fetch the OPENAI_API_KEY.
	‚Ä¢	Falls back to known paths if .env isn‚Äôt found initially.
	‚Ä¢	Initializes the OpenAI client (gpt-4o-2024-05-13 model).
	‚Ä¢	Directories:
	‚Ä¢	Sets output path for blog posts.
	‚Ä¢	Sets up a log directory (.unified-execution-log/logs) for tracking runs.
	‚Ä¢	Schema Imports:
	‚Ä¢	Tries relative import of ComparisonBlogPost and ParagraphItem, falling back to absolute.

‚∏ª

üß† Main Functionality: Blog Generation

1. process_blog_generation(term_a, term_b, research_context)
	‚Ä¢	Top-level method to generate the full blog post.
	‚Ä¢	Steps:
	1.	Creates a slug for file naming.
	2.	Calls generate_blog_post() to invoke OpenAI API.
	3.	Runs _post_process_blog_json() to clean/fix structure.
	4.	Calculates read time and word count.
	5.	Saves JSON to output directory.

‚∏ª

2. generate_blog_post(term_a, term_b, research_context)
	‚Ä¢	Handles full blog generation using OpenAI‚Äôs function calling API.
	‚Ä¢	Inputs a prompt + function schema, receives structured blog content.
	‚Ä¢	Steps:
	1.	Constructs prompt with _get_prompt().
	2.	Defines a structured output schema.
	3.	Sends chat.completions.create() to OpenAI.
	4.	Extracts JSON from function_call.arguments.
	5.	Cleans JSON with _clean_json_content().
	6.	Validates schema structure.
	7.	Returns the cleaned dictionary.

‚∏ª

üìù Prompt & Schema Handling

3. _get_prompt(term_a, term_b, research_context)
	‚Ä¢	Constructs a highly detailed system prompt.
	‚Ä¢	Includes:
	‚Ä¢	Audience goals.
	‚Ä¢	SEO instructions.
	‚Ä¢	Required schema format (embedded as JSON).
	‚Ä¢	Optional research context appended.

‚∏ª

üßº Post-Processing and Cleanup

4. _post_process_blog_json(blog_json, term_a, term_b)
	‚Ä¢	Fixes formatting or schema issues in the response.
	‚Ä¢	Normalizes:
	‚Ä¢	published_date
	‚Ä¢	introduction_paragraphs & summary_paragraphs format
	‚Ä¢	media keys to append -comparison-blog
	‚Ä¢	Adds default conclusion if missing
	‚Ä¢	Cleans punctuation, spacing, casing, and dangling JSON quirks

‚∏ª

üßÆ Utilities & Validation

5. _calculate_word_count(blog_post)
	‚Ä¢	Iterates through blog sections and totals all word counts.
	‚Ä¢	Also logs section-wise breakdowns.

6. _calculate_read_time(word_count)
	‚Ä¢	Uses WPM (238) to estimate total read time (minimum 1 min).

7. _validate_blog_post_schema(blog_post)
	‚Ä¢	Non-blocking logging validator.
	‚Ä¢	Checks:
	‚Ä¢	Presence and type of required fields.
	‚Ä¢	Word count per section.
	‚Ä¢	Structure rules (e.g., 5 key_differences, 3 summary_paragraphs).

‚∏ª

8. _clean_json_content(content)
	‚Ä¢	Attempts to fix malformed or nearly-valid JSON using regex and heuristics.
	‚Ä¢	Goes through multiple ‚Äúcleanup attempts‚Äù:
	‚Ä¢	Normalize whitespace.
	‚Ä¢	Fix unquoted keys or values.
	‚Ä¢	Patch common character problems (e.g., "", \n, ').
	‚Ä¢	Aggressive JSON quoting if needed.

‚∏ª

9. _log_blog_activity(term_a, term_b, success, error)
	‚Ä¢	Writes a Markdown-style log file for each blog run.
	‚Ä¢	Documents input, outcome, next steps.

‚∏ª

üß∞ Other Utility Functions
	‚Ä¢	_extract_blog_text_content() and _extract_content_text():
	‚Ä¢	Used for pulling raw text from the blog JSON for word count or display.
	‚Ä¢	_create_slug(text):
	‚Ä¢	Converts terms to URL-safe slugs.

‚∏ª

‚úÖ What It Does in Summary

This script:
	‚Ä¢	Dynamically builds a structured JSON prompt with specific crypto comparison instructions.
	‚Ä¢	Uses GPT-4o‚Äôs function calling to get back clean JSON output.
	‚Ä¢	Validates and logs everything.
	‚Ä¢	Cleans and fixes malformed model outputs.
	‚Ä¢	Saves the result into a usable .json file for publishing.

Let me know if you want a visual diagram, simplified walkthrough for non-devs, or a stripped-down version of this agent.